services:
  # 로드밸런싱 및 리버스 프록시 & HTTPS 설정
  traefik-main:
    image: traefik:v3.3
    command:
      - "--api.insecure=false"
      - "--providers.docker=true" 
      - "--providers.swarm=true"
      - "--providers.swarm.exposedByDefault=false"
      - "--providers.docker.exposedByDefault=false"
      - "--providers.swarm.network=main-network"
      - "--providers.swarm.watch=true"
      - "--providers.file.filename=/dynamic-config.yml"
      - "--providers.file.watch=true"
      - "--providers.swarm.constraints=Label(`traefik.constraint-label`,`main-stack`)"
      - "--entrypoints.web.address=:80"
      - "--entryPoints.websecure.address=:443"
      - "--entryPoints.web.http.redirections.entrypoint.to=websecure"
      - "--entryPoints.web.http.redirections.entrypoint.scheme=https"
      - "--certificatesResolvers.letsencrypt.acme.tlsChallenge=true"
      - "--certificatesResolvers.letsencrypt.acme.email=techeerzip@gmail.com"
      - "--certificatesResolvers.letsencrypt.acme.storage=/letsencrypt/acme.json"
      - "--log.level=DEBUG"
      - "--accesslog=true"
      - "--accesslog.filepath=/traefik/logs/access.log"
      - "--accesslog.bufferingsize=100"
      - "--accesslog.format=json"
      - "--accesslog.fields.defaultmode=keep"
      - "--accesslog.fields.headers.defaultmode=keep"
      - "--accesslog.fields.headers.names.X-Forwarded-For=keep"
      - "--api.dashboard=true"
      - "--metrics.prometheus=true"
      - "--metrics.prometheus.buckets=0.100000, 0.300000, 1.200000, 5.000000"
      - "--metrics.prometheus.addEntryPointsLabels=true"
      - "--metrics.prometheus.addServicesLabels=true"
      - "--entryPoints.metrics.address=:8091"
      - "--metrics.prometheus.entryPoint=metrics"
      - "--tracing=true"
      - "--tracing.otlp=true"
      - "--tracing.otlp.grpc.insecure=true"
      - "--tracing.otlp.grpc.endpoint=100.116.150.4:4317"
      - "--tracing.serviceName=traefik"
      - "--tracing.sampleRate=1.0"
    ports:
      - target: 443
        published: 443
        protocol: tcp
        mode: host
      - target: 8090
        published: 8090
        protocol: tcp
        mode: host
    volumes:
      - "/var/run/docker.sock:/var/run/docker.sock"
      - /home/ubuntu/traefik/config.yml:/dynamic-config.yml:ro
      - "traefik-certificates-main:/letsencrypt"  
      - "traefik_logs_main:/traefik/logs/"
    environment:
      - HOME_SERVER_URL=$HOME_SERVER_URL
    networks:
      - main-network
    deploy:
      replicas: 1
      placement:
        constraints:
          - node.labels.instance == oracle1
      labels:
        - "traefik.enable=true"
        - "traefik.constraint-label=main-stack"
        - "traefik.http.routers.maindashboard.rule=Host(`traefik.techeerzip.cloud`)"
        - 'traefik.http.routers.maindashboard.entrypoints=websecure'
        - "traefik.http.routers.maindashboard.service=api@internal"
        - "traefik.http.routers.maindashboard.tls.certresolver=letsencrypt"
        - "traefik.http.services.maindashboard.loadbalancer.server.port=8090"
        - "traefik.http.routers.maindashboard.middlewares=auth-main"
        - "traefik.http.middlewares.auth-main.basicauth.users=admin:$$apr1$$6dXZ/kXf$$8KlXA1NQ5MfJDOyLveifr1"

  # 전체 관리자 페이지
  # portainer:
  #   image: portainer/portainer-ce:latest
  #   ports:
  #     - "9001:9000"
  #   deploy:
  #     replicas: 1
  #     placement:
  #       constraints:
  #         - node.labels.instance == staging
  #     labels:
  #       - traefik.enable=true
  #       - traefik.http.services.portainer.loadbalancer.server.port=9000
  #       - traefik.http.routers.portainer.entrypoints=websecure
  #       - traefik.http.routers.portainer.rule=Host(`portainer.techeerzip.cloud`)
  #       - traefik.http.routers.portainer.tls.certresolver=letsencrypt
  #   volumes:
  #     - /var/run/docker.sock:/var/run/docker.sock
  #     - portainer_data:/data
  #   networks:
  #     - main-network
  
  # 포테이너 agent
  # agent:
  #   image: portainer/agent:latest
  #   environment:
  #     - AGENT_CLUSTER_ADDR=tasks.agent
  #     - DOCKER_HOST=unix:///var/run/docker.sock
  #   volumes:
  #     - /var/run/docker.sock:/var/run/docker.sock
  #     - /var/lib/docker/volumes:/var/lib/docker/volumes
  #   networks:
  #     - main-network
  #   deploy:
  #     mode: global
  #     placement:
  #       constraints:
  #         - node.platform.os == linux

  # 모니터링 메트릭 데이터 수집
  prometheus-main:
    image: prom/prometheus:latest
    ports:
      - "9091:9090"
    user: root
    networks:
      - main-network
      - staging-network
    extra_hosts:
      - "host.docker.internal:host-gateway"
    volumes:
      - ./prometheus/prometheus.yml:/etc/prometheus/prometheus.yml
      - /var/run/docker.sock:/var/run/docker.sock
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.retention.time=15d'
      - '--storage.tsdb.retention.size=3GB'
    deploy:
      replicas: 1
      placement:
        constraints:
          - node.labels.instance == staging
  
  # 컨터이너 메트릭 데이터 수집
  # cadvisor:
  #   image: gcr.io/cadvisor/cadvisor
  #   deploy:
  #     mode: global
  #     placement:
  #       constraints:
  #         - node.labels.archtype != arm
  #   labels:
  #     - prometheus-job=cadvisor
  #   ports:
  #     - "8081:8080"
  #   volumes:
  #     - /var/run/docker.sock:/var/run/docker.sock:ro
  #     - /:/rootfs:ro
  #     - /var/run:/var/run
  #     - /sys:/sys:ro
  #     - /var/lib/docker:/var/lib/docker:ro
  #   networks:
  #     - main-network
  
  # 호스트 메트릭 데이터 수집
  # node-exporter:
  #   image: quay.io/prometheus/node-exporter:v1.8.1
  #   ports:
  #     - "9100:9100"
  #   command:
  #     - '--path.procfs=/host/proc'
  #     - '--path.sysfs=/host/sys'
  #     - '--collector.filesystem.ignored-mount-points="^/(sys|proc|dev|host|etc)($$|/)"'
  #   volumes:
  #     - /proc:/host/proc:ro
  #     - /sys:/host/sys:ro
  #     - /:/rootfs:ro
  #   networks:
  #     - main-network
  #   deploy:
  #     mode: global
  #     placement:
  #       constraints:
  #         - node.labels.archtype != arm
  #   labels:
  #     - prometheus-job=node-exporter

  # 로그 수집
  promtail-main:
    image:  grafana/promtail:latest
    volumes:
      # - ./promtail/config.yaml:/etc/promtail/docker-config.yaml\
      - /home/ubuntu/promtail:/etc/promtail/
      - /var/log:/var/log:ro
      - /var/lib/docker/containers:/var/lib/docker/containers:ro
      - /var/run/docker.sock:/var/run/docker.sock
      # - ./promtail/GeoLite2-City.mmdb:/etc/promtail/GeoLite2-City.mmdb
      - traefik_logs_main:/traefik/logs/
    command:
      - -config.file=/etc/promtail/config.yaml
      - -config.expand-env=true
    depends_on:
      - loki
    networks:
      - main-network
    ports:
      - "9081:9080"
    deploy:
      replicas: 1
      placement:
        constraints:
          - node.labels.instance == oracle1
  
  # 레디스 & 레빗MQ
  rabbitmq-main:
    image: "rabbitmq:3-management"
    ports:
      - "5673:5672"
      - "15673:15672"
      - "15693:15692"
    environment:
      - RABBITMQ_DEFAULT_USER=${RABBITMQ_DEFAULT_USER}
      - RABBITMQ_DEFAULT_PASS=${RABBITMQ_DEFAULT_PASS}
    networks:
      - main-network
    tty: true
    deploy:
      replicas: 1
      placement:
        constraints:
          - node.labels.instance == staging

  redis-main:
    image: "redis:alpine"
    ports:
      - "6378:6379"
    networks:
      - main-network
    environment:
      - REDIS_PASSWORD=$REDIS_PASSWORD
    command: ["redis-server", "--requirepass", "${REDIS_PASSWORD}"]
    tty: true
    deploy:
      replicas: 1
      placement:
        constraints:
          - node.labels.instance == staging
    
networks:
  main-network:
    driver: overlay
    external: true
  staging-network:
    external: true

volumes:
  traefik-certificates-main:
  traefik_logs_main: