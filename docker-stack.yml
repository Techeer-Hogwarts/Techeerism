version: '3.8'

services:
  traefik:
    image: traefik:v2.9
    command:
      - "--api.insecure=false"
      - "--providers.docker=true" 
      - "--providers.docker.swarmMode=true"
      - "--providers.docker.exposedbydefault=false"
      - "--providers.docker.network=main-network"
      - "--entrypoints.web.address=:80"
      - "--entrypoints.websecure.address=:443"
      - "--entrypoints.web.http.redirections.entrypoint.to=websecure"
      - "--entryPoints.web.http.redirections.entrypoint.scheme=https"
      - "--certificatesresolvers.letsencrypt.acme.tlschallenge=true"
      - "--certificatesresolvers.letsencrypt.acme.email=whysano517@gmail.com"
      - "--certificatesresolvers.letsencrypt.acme.storage=/letsencrypt/acme.json"
      - "--log.level=INFO"
      - "--accesslog=true"
      - "--api.dashboard=true"
      - "--metrics.prometheus=true"
      - "--metrics.prometheus.buckets=0.100000, 0.300000, 1.200000, 5.000000"
      - "--metrics.prometheus.addEntryPointsLabels=true"
      - "--metrics.prometheus.addServicesLabels=true"
      - "--entryPoints.metrics.address=:8091"
      - "--metrics.prometheus.entryPoint=metrics"
    ports:
      - "80:80"
      - "443:443"
      - "8090:8080"
    volumes:
      - "/var/run/docker.sock:/var/run/docker.sock"
      - "traefik-certificates:/letsencrypt"  
    networks:
      - main-network
    deploy:
      replicas: 1
      placement:
        constraints:
          - node.labels.instance == main
      labels:
        # - 'traefik.http.routers.http-catchall.rule=PathPrefix(`/`)'
        # - 'traefik.http.routers.http-catchall.entrypoints=web'
        # - 'traefik.http.routers.http-catchall.middlewares=redirect-to-https'
        # - 'traefik.http.middlewares.redirect-to-https.redirectscheme.scheme=https'
        - "traefik.enable=true"
        - "traefik.http.routers.mydashboard.rule=Host(`api.techeerzip.cloud`)"
        - 'traefik.http.routers.mydashboard.entrypoints=websecure'
        - "traefik.http.routers.mydashboard.service=api@internal"
        - "traefik.http.routers.mydashboard.tls.certresolver=letsencrypt"
        - "traefik.http.services.api@internal.loadbalancer.server.port=8090"
        # - "traefik.http.routers.mydashboard.middlewares=mydashboard-stripprefix"
        # - "traefik.http.middlewares.mydashboard-stripprefix.stripprefix.prefixes=/traefik"
      #   - "traefik.http.routers.traefik.middlewares=auth"
      #   - "traefik.http.middlewares.auth.basicauth.users=${TRAEFIK_AUTH}"

  portainer:
    image: portainer/portainer-ce:latest
    ports:
      - "9000:9000"
    deploy:
      replicas: 1
      placement:
        constraints:
          - node.labels.instance == main
      labels:
        - traefik.enable=true
        - traefik.http.services.portainer.loadbalancer.server.port=9000
        - traefik.http.routers.portainer.entrypoints=websecure
        - traefik.http.routers.portainer.rule=Host(`api.techeerzip.cloud`) && PathPrefix(`/portainer`)
        - traefik.http.routers.portainer.middlewares=portainer-stripprefix
        - traefik.http.middlewares.portainer-stripprefix.stripprefix.prefixes=/portainer
        - traefik.http.routers.portainer.tls.certresolver=letsencrypt
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
      - portainer_data:/data
    networks:
      - main-network

  nest:
    image: suhach0523/techeerism-nest:1.0.7
    networks:
      - main-network
    deploy:
      replicas: 2
      placement:
        constraints:
          - node.labels.instance == main
      update_config:
        parallelism: 1
        delay: 10s
      restart_policy:
        condition: on-failure
      labels:
        - traefik.enable=true
        - traefik.http.services.nest.loadbalancer.server.port=8000
        - traefik.http.routers.nest.entrypoints=websecure
        - traefik.http.routers.nest.rule=Host(`api.techeerzip.cloud`) && PathPrefix(`/api/v1`)
        - traefik.http.routers.nest.middlewares=nest-stripprefix
        - traefik.http.middlewares.nest-stripprefix.stripprefix.prefixes=/api/v1
        - traefik.http.routers.nest.tls.certresolver=letsencrypt

  # Monitoring services
  grafana:
    image: grafana/grafana:latest
    ports:
      - "3000:3000"
    deploy:
      replicas: 1
      placement:
        constraints:
          - node.labels.instance == monitoring
      labels:
        - traefik.enable=true
        - traefik.http.services.grafana.loadbalancer.server.port=3000
        - traefik.http.routers.grafana.entrypoints=websecure
        - traefik.http.routers.grafana.tls.certresolver=letsencrypt
        - traefik.http.routers.grafana.rule=Host(`api.techeerzip.cloud`) && PathPrefix(`/grafana`)
        - traefik.http.routers.grafana.middlewares=grafana-stripprefix
        - traefik.http.middlewares.grafana-stripprefix.stripprefix.prefixes=/grafana
    volumes:
      - grafana_data:/var/lib/grafana
    networks:
      - main-network

  
  prometheus:
    image: prom/prometheus:latest
    ports:
      - "9090:9090"
    user: root
    networks:
      - main-network
    extra_hosts:
      - "host.docker.internal:host-gateway"
    volumes:
      - ./prometheus.yml:/etc/prometheus/prometheus.yml
      - /var/run/docker.sock:/var/run/docker.sock
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
    deploy:
      replicas: 1
      placement:
        constraints:
          - node.labels.instance == main
    
  cadvisor:
    image: google/cadvisor:latest
    deploy:
      mode: global
    labels:
      - prometheus-job=cadvisor
    ports:
      - "8080:8080"
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock:ro
      - /:/rootfs:ro
      - /var/run:/var/run
      - /sys:/sys:ro
      - /var/lib/docker:/var/lib/docker:ro
    networks:
      - main-network
  
  node-exporter:
    image: quay.io/prometheus/node-exporter:v1.8.1
    ports:
      - "9100:9100"
    command:
      - '--path.procfs=/host/proc'
      - '--path.sysfs=/host/sys'
      - '--collector.filesystem.ignored-mount-points="^/(sys|proc|dev|host|etc)($$|/)"'
    volumes:
      - /proc:/host/proc:ro
      - /sys:/host/sys:ro
      - /:/rootfs:ro
    networks:
      - main-network
    deploy:
      mode: global
    labels:
      - prometheus-job=node-exporter

networks:
  main-network:
    driver: overlay

volumes:
  traefik-certificates:
  portainer_data:
  grafana_data: