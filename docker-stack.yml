version: '3.8'

services:
  traefik:
    image: traefik:v2.9
    command:
      - "--api.insecure=true"
      - "--providers.docker.swarmMode=true"
      - "--entrypoints.web.address=:80"
      - "--entrypoints.websecure.address=:443"
    ports:
      - "80:80"
      - "443:443"
      - "8090:8080"
    volumes:
      - "/var/run/docker.sock:/var/run/docker.sock"
    networks:
      - main-network
    deploy:
      replicas: 1
      placement:
        constraints:
          - node.labels.instance == main

  portainer:
    image: portainer/portainer-ce:latest
    ports:
      - "9000:9000"
    deploy:
      replicas: 1
      placement:
        constraints:
          - node.labels.instance == main
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
      - portainer_data:/data
    networks:
      - main-network
  
  nest:
    image: suhach0523/techeerism-nest:1.0.7
    networks:
      - main-network
    deploy:
      replicas: 2
      placement:
        constraints:
          - node.labels.instance == main
      update_config:
        parallelism: 1
        delay: 10s
      restart_policy:
        condition: on-failure
      labels:
        - traefik.enable=true
        - traefik.http.services.nest.loadbalancer.server.port=8000
        - traefik.http.routers.nest.rule=Host(`nest.localhost`) && PathPrefix(`/api/v1`)
        - traefik.http.routers.nest.middlewares=nest-stripprefix
        - traefik.http.middlewares.nest-stripprefix.stripprefix.prefixes=/api/v1

  # Monitoring services
  grafana:
    image: grafana/grafana:latest
    ports:
      - "3000:3000"
    deploy:
      replicas: 1
      placement:
        constraints:
          - node.labels.instance == monitoring
    volumes:
      - grafana_data:/var/lib/grafana
    networks:
      - main-network
  
  prometheus:
    image: prom/prometheus:latest
    ports:
      - "9090:9090"
    networks:
      - main-network
    extra_hosts:
      - "host.docker.internal:host-gateway"
    volumes:
      - ./prometheus.yml:/etc/prometheus/prometheus.yml
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
    deploy:
      replicas: 1
      placement:
        constraints:
          - node.labels.instance == main
    
  cadvisor:
    image: google/cadvisor:latest
    deploy:
      mode: global
      labels:
        - prometheus-job=cadvisor
    ports:
      - "8080:8080"
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock:ro
      - /:/rootfs:ro
      - /var/run:/var/run
      - /sys:/sys:ro
      - /var/lib/docker:/var/lib/docker:ro
    networks:
      - main-network

  # cadvisor:
  #   image: google/cadvisor:latest
  #   privileged: true  # Run the container in privileged mode
  #   deploy:
  #     mode: global
  #   devices:
  #     - "/dev/kmsg:/dev/kmsg"  # Map the device from the host to the container
  #   volumes:
  #     - /:/rootfs:ro
  #     - /var/run:/var/run:rw
  #     - /sys:/sys:ro
  #     - /var/lib/docker/:/var/lib/docker:ro
  #     - /dev/disk/:/dev/disk:ro
  #   ports:
  #     - "8090:8080"
  #   networks:
  #     - main-network
  # cadvisor:
  #   image: docker
  #   volumes: 
  #       - /var/run/docker.sock:/var/run/docker.sock
  #   entrypoint: ["/bin/sh","-c"]
  #   networks:
  #     - main-network
  #   ports:
  #     - "8090:8080"
  #   deploy:
  #     mode: global
  #   environment:
  #     - PARENT={{.Task.Name}}
  #     - CHILDNAME={{.Service.Name}}_sidecar.{{.Node.ID}}.{{.Task.ID}}
  #     - CADVISOR_VERSION=latest
  #   command: 
  #   - |
  #     exec docker run -i --rm --network="container:$${PARENT}" \
  #           --volume=/:/rootfs:ro \
  #           --volume=/var/run:/var/run:ro  \
  #           --volume=/sys:/sys:ro  \
  #           --volume=/var/lib/docker/:/var/lib/docker:ro \
  #           --volume=/dev/disk/:/dev/disk:ro \
  #           --name $${CHILDNAME} \
  #           --privileged \
  #           --device=/dev/kmsg \
  #           gcr.io/cadvisor/cadvisor:$${CADVISOR_VERSION}
  
  node-exporter:
    image: quay.io/prometheus/node-exporter:v1.8.1
    ports:
      - "9100:9100"
    command:
      - '--path.procfs=/host/proc'
      - '--path.sysfs=/host/sys'
      - '--collector.filesystem.ignored-mount-points="^/(sys|proc|dev|host|etc)($$|/)"'
    volumes:
      - /proc:/host/proc:ro
      - /sys:/host/sys:ro
      - /:/rootfs:ro
    networks:
      - main-network
    deploy:
      mode: global
      labels:
        - prometheus-job=node-exporter

networks:
  main-network:
    driver: overlay

volumes:
  portainer_data:
  grafana_data: